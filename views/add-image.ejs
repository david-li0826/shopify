<% include partials/header.ejs %>
    <div id="drop-area">
        <form class="my-form">
            <p>Upload multiple images with the file dialog or by dragging and dropping images onto the dashed region</p>
            <input type="file" id="fileElem" multiple accept="image/*" onchange="handleFiles(this.files)">
            <label class="button" for="fileElem">Select some files</label>
            <script>
                // ************************ Drag and drop ***************** //
                let dropArea = document.getElementById("drop-area");

                    // Prevent default drag behaviors
                ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropArea.addEventListener(eventName, preventDefaults, false);
                    document.body.addEventListener(eventName, preventDefaults, false);
                })

                // Highlight drop area when item is dragged over it
                ;['dragenter', 'dragover'].forEach(eventName => {
                    dropArea.addEventListener(eventName, highlight, false);
                })

                ;['dragleave', 'drop'].forEach(eventName => {
                    dropArea.addEventListener(eventName, unhighlight, false);
                })

                // Handle dropped files
                dropArea.addEventListener('drop', handleDrop, false);

                function preventDefaults (e) {
                    e.preventDefault();
                    e.stopPropagation();
                }

                function highlight(e) {
                    dropArea.classList.add('highlight');
                }

                function unhighlight(e) {
                    dropArea.classList.remove('active');
                }

                function handleDrop(e) {
                    let dt = e.dataTransfer;
                    let files = dt.files;

                    handleFiles(files);
                }

                function handleFiles(files) {
                    files = [...files];
                    files.forEach(previewFile);
                }

                function previewFile(file) {
                    let reader = new FileReader();
                    reader.readAsDataURL(file);
                    reader.onloadend = function() {
                        let img = document.createElement('img');
                        img.src = reader.result;
                        document.getElementById('gallery').appendChild(img);
                    }
                }
            </script>
        </form>
        <div id="gallery"></div>
    </div>
    <div id="button-area">
        <label class="upload-button" id="ub1">Upload</label>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script>
            $(document).ready(function() {
                // bind the click event
                $('.upload-button').bind("click", function (evt) {
                    let files = $('#fileElem').prop('files');
                    let requests = [];
                    if (files.length > 0) {
                        for (let i = 0; i < files.length; i++) {
                            let reader = new FileReader();
                            let file = files[i];
                            reader.readAsDataURL(file);
                            console.log(file.name);
                            reader.onloadend = function() {
                                let img = reader.result.split(',')[1];
                                let req = {
                                    "name": file.name,
                                    "type": file.type,
                                    "image": img
                                };
                                requests.push($.ajax({
                                    type: 'POST',
                                    url: "/images/upload",
                                    async: true,
                                    data: JSON.stringify(req),
                                    error: function (e) {
                                        console.log(e);
                                    },
                                    dataType: "json",
                                    contentType: "application/json"
                                }));
                            }
                        }
                    }
                    $.when($, requests).done(function () {
                        alert("Upload Completed.");
                        location.reload();
                    });
                    evt.preventDefault();
                });
            });
        </script>
    </div>
</div>
<style>
    #drop-area {
        border: 2px dashed #ccc;
        border-radius: 20px;
        width: 480px;
        margin: 50px auto;
        padding: 20px;
    }
    #drop-area.highlight {
        border-color: purple;
    }
    p {
        margin-top: 0;
    }
    .my-form {
        margin-bottom: 10px;
    }
    #gallery {
        margin-top: 10px;
    }
    #gallery img {
        width: 150px;
        margin-bottom: 10px;
        margin-right: 10px;
        vertical-align: middle;
    }
    .button {
        display: inline-block;
        padding: 10px;
        background: #ccc;
        cursor: pointer;
        border-radius: 5px;
        border: 1px solid #ccc;
    }
    .button:hover {
        background: #ddd;
    }
    .upload-button {
        margin-left: 20px;
        display: inline-block;
        padding: 10px;
        background: #ccc;
        cursor: pointer;
        border-radius: 5px;
        border: 1px solid #ccc;
    }
    .upload-button:hover {
        background: #ddd;
    }
    #fileElem {
        display: none;
    }
</style>
</body>
</html>